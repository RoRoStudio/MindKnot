// Slices
export { default as loopSlice } from './loopSlice';
export { default as executionSlice } from './executionSlice';
export { default as templateSlice } from './templateSlice';
export { default as builderSlice } from './builderSlice';

// Slice reducers
export { default as loopReducer } from './loopSlice';
export { default as executionReducer } from './executionSlice';
export { default as templateReducer } from './templateSlice';
export { default as builderReducer } from './builderSlice';

// Actions from loopSlice
export {
    fetchLoops,
    createLoop,
    updateLoop,
    deleteLoop,
    duplicateLoop,
    setSelectedLoop,
    setLoopFilters,
    clearLoopFilters,
    setLoopSorting,
    loadMoreLoops,
    refreshLoops,
    toggleLoopFavorite,
    clearLoopError,
    resetLoopState,
} from './loopSlice';

// Actions from executionSlice
export {
    startExecution,
    pauseExecution,
    resumeExecution,
    stopExecution,
    skipActivity,
    previousActivity,
    updateActivityProgress,
    completeActivity,
    completeExecution,
    cancelExecution,
    enterBackground,
    exitBackground,
    saveExecutionState,
    recoverExecution,
    clearRecoveryData,
    addExecutionToHistory,
    clearExecutionHistory,
    clearExecutionError,
    resetExecutionState,
} from './executionSlice';

// Actions from templateSlice
export {
    fetchTemplates,
    createTemplate,
    updateTemplate,
    deleteTemplate,
    duplicateTemplate,
    setSelectedTemplate,
    setTemplateFilters,
    clearTemplateFilters,
    clearTemplateError,
    resetTemplateState,
} from './templateSlice';

// Actions from builderSlice
export {
    initializeDraftLoop,
    updateDraftLoop,
    clearDraftLoop,
    setCurrentStep,
    nextStep,
    previousStep,
    addActivity,
    updateActivity,
    removeActivity,
    reorderActivities,
    duplicateActivity,
    openActivityBuilder,
    closeActivityBuilder,
    setSelectedTemplate as setSelectedTemplateInBuilder,
    startDragging,
    setDropTarget,
    endDragging,
    cancelDragging,
    setValidationErrors,
    clearValidationErrors,
    validateDraftLoop,
    setPreviewMode,
    markSaved,
    resetBuilderState,
} from './builderSlice';

// Loop selectors
export {
    selectLoopState,
    selectLoops,
    selectSelectedLoop,
    selectLoopFilters,
    selectLoopPagination,
    selectLoopLoading,
    selectLoopError,
    selectLoopById,
    selectFilteredLoops,
    selectSortedLoops,
    selectLoopCategories,
    selectLoopTags,
    selectLoopStats,
    selectRecentLoops,
    selectFavoriteLoops,
    selectLoopsByCategory,
    selectLoopsByTag,
    selectLoopDurations,
    selectShortLoops,
    selectMediumLoops,
    selectLongLoops,
    selectLoopsWithoutActivities,
    selectIncompleteLoops,
    selectHasLoops,
    selectHasFilters,
    selectIsFiltered,
    selectCanLoadMore,
    selectLoadingState,
} from './loopSelectors';

// Execution selectors
export {
    selectExecutionState,
    selectCurrentExecution,
    selectExecutionHistory,
    selectIsExecuting,
    selectIsPaused,
    selectExecutionLoading,
    selectExecutionError,
    selectBackgroundState,
    selectRecoveryState,
    selectCurrentActivity,
    selectCurrentActivityIndex,
    selectCurrentIteration,
    selectExecutionProgress,
    selectExecutionTiming,
    selectExecutionStatus,
    selectCanPause,
    selectCanResume,
    selectCanStop,
    selectCanSkip,
    selectCanGoBack,
    selectRecentExecutions,
    selectExecutionHistoryByLoop,
    selectExecutionStats,
    selectExecutionStatsForLoop,
    selectIsInBackground,
    selectBackgroundDuration,
    selectTimeSinceLastActive,
    selectIsRecovering,
    selectRecoveryData,
    selectRecoveryError,
    selectHasRecoverableExecution,
    selectExecutionLoadingState,
    selectIsExecutionActive,
    selectExecutionSummary,
} from './executionSelectors';

// Template selectors
export {
    selectTemplateState,
    selectTemplates,
    selectSelectedTemplate,
    selectTemplateFilters,
    selectTemplateLoading,
    selectTemplateError,
    selectTemplateById,
    selectFilteredTemplates,
    selectBuiltInTemplates,
    selectCustomTemplates,
    selectTemplatesByType,
    selectTemplatesByCategory,
    selectTemplateTypes,
    selectTemplateCategories,
    selectTemplateTags,
    selectTemplateStats,
    selectShortTemplates,
    selectMediumTemplates,
    selectLongTemplates,
    selectRecentTemplates,
    selectPopularTemplates,
    selectTemplatesForType,
    selectTemplatesForCategory,
    selectSimilarTemplates,
    selectHasTemplates,
    selectHasCustomTemplates,
    selectHasTemplateFilters,
    selectIsTemplateFiltered,
    selectTemplateLoadingState,
} from './templateSelectors';

// Builder selectors
export {
    selectBuilderState,
    selectDraftLoop,
    selectIsEditing,
    selectEditingLoopId,
    selectCurrentStep,
    selectHasUnsavedChanges,
    selectValidationErrors,
    selectDragAndDropState,
    selectActivityBuilderState,
    selectPreviewMode,
    selectDraftActivities,
    selectDraftLoopTitle,
    selectDraftLoopDescription,
    selectDraftLoopCategory,
    selectDraftLoopTags,
    selectDraftLoopSettings,
    selectDraftLoopStats,
    selectIsValidDraftLoop,
    selectCanSaveDraftLoop,
    selectCanNavigateToStep,
    selectStepProgress,
    selectCompletedStepsCount,
    selectOverallProgress,
    selectIsActivityBuilderOpen,
    selectEditingActivity,
    selectEditingActivityIndex,
    selectSelectedTemplateInBuilder,
    selectIsEditingExistingActivity,
    selectIsDragging,
    selectDraggedActivityIndex,
    selectDropTargetIndex,
    selectCanDropAtIndex,
    selectHasValidationErrors,
    selectValidationErrorsArray,
    selectHasTitleError,
    selectHasActivitiesError,
    selectHasGeneralError,
    selectCanGoToNextStep,
    selectCanGoToPreviousStep,
    selectNextStepName,
    selectPreviousStepName,
    selectBuilderMode,
    selectShouldShowUnsavedWarning,
    selectBuilderSummary,
} from './builderSelectors';

// Types
export type { LoopState } from './loopSlice';
export type { ExecutionSliceState } from './executionSlice';
export type { TemplateState } from './templateSlice';
export type { BuilderState } from './builderSlice'; 